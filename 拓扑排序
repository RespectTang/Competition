/*
1450.拓扑排序-确定比赛名次 (10分) 
C时间限制：1000 毫秒 |  C内存限制：3000 Kb
题目内容：
 有N个比赛队（1<=N<=500），编号依次为1，2，3，。。。。，N进行比赛，比赛结束后，裁判委员会要将所
 有参赛队伍从前往后依次排名，但现在裁判委员会不能直接获得每个队的比赛成绩，只知道每场比赛的结果
 ，即P1赢P2，用P1，P2表示，排名时P1在P2之前。现在请你编程序确定排名。
 输入描述
输入有若干组，每组中的第一行为二个数N（1<=N<=500），M；其中N表示队伍的个数，M表示接着有M行的输
入数据。接下来的M行数据中，每行也有两个整数P1，P2表示即P1队赢了P2队。
 输出描述
给出一个符合要求的排名。输出时队伍号之间有空格，最后一名后面没有空格。
其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，
即输入数据确保一定能有一个符合要求的排名。
 输入样例
4 3
1 2
2 3
4 3
输出样例
1 2 4 3

*/

#include<iostream>
#include<cstring>
#include<cstdio>
using namespace std;

int ans[501][501];//记录是否比赛 
int n,indegree[501];//记录前驱 
int queue[501];//保存拓扑

void tuopu()
{
	int i,j,top,k=0;
	for(j=0;j<n;j++)
	{
		for(i=1;i<=n;i++)
		{
			if(indegree[i]==0)//前驱为0就是第一名 
			{
				top=i;
				break;
			}
		}
		queue[k++]=top;
		indegree[top]=-1;
		for(i=1;i<=n;i++)
			if(ans[top][i])
			{
				indegree[i]--;
				ans[top][i]=-1;
			}
				
 
	}
	for(i=0;i<k-1;i++)
		printf("%d ",queue[i]);
	printf("%d\n",queue[n-1]);
 } 


int main()
{
	int i,a,b,m;
	while(scanf("%d%d",&n,&m)!=EOF)
	{
		memset(indegree,0,sizeof(indegree));
		memset(ans,0,sizeof(ans));
		for(i=0;i<m;i++)
		{
				cin>>a>>b;
				if(!ans[a][b])
				{
					ans[a][b]=1;
					indegree[b]++;	
				}
		}
		tuopu();
	}
	
	return 0;
	
}

/***************************************************************************************************/





