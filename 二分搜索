/*
637.二分-跳过去 (10分) 
C时间限制：1000 毫秒 |  C内存限制：3000 Kb
题目内容：
“跳过去”比赛将在一条河中进行，河中分布着一些大石头。组委会选择了两块石头作为比赛起点和终点。在起点和终点之间，
有 N 块石头（不含起点和终 点的岩石）。比赛时选手们将从起点出发，每一步跳向下一块石头，直到终点。
为了提高比赛难度，组委会计划移走一些石头，使得选手们在比赛过程中的最短跳跃距离尽可能长。由于预算限制，组委会至多
从起点和终点之间移走 M 块石头（不能移走起点和终点的石头）。
输入描述
输入第一行包含3个整数 L,N，M，表示起点和终点的距离，之间的岩石数，以及组委会至多移走的岩石数。
接下来 N 行，每行一个整数，第 i 行的整数0<d?[i]<L, 表示中间依次的每块石头与起点的距离，保证
d[i]<d[i+1]
其中L<=10^9, M<N-2<=10^5
输出描述
最短跳跃距离的最大值
输入样例
25 5 2
2
11
14
17
21
输出样例
4
*/ 
#include<iostream>
#include<cstdio>
#include<cstring> 
using namespace std;
int main()
{
	int l,m,n;
	scanf("%d%d%d",&l,&n,&m);
	int d[n+2];
	memset(d,0,sizeof(d));
	for(int i=1;i<=n;i++)
		scanf("%d",&d[i]);
	int left=1,right=l;
	while(left<=right)
	{
		int mid=(left+right)/2;
		int cnt=0,ls=0;//判断需要移动几块石头 
		for(int i=1;i<=n;i++)
		{
			if(d[i]-d[ls]<mid)//把距离小于mid的石头去掉 
				cnt++;
			else
				ls=i;
		}
		if(cnt>m) right=mid-1;
		else left=mid+1;
	}
	printf("%d\n",left-1);
	return 0;
}

/*************************************************************************************************************/
/*
638.二分-教室管理 (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
在大学期间，经常需要租借教室。大到院系举办活动，小到学习小组自习讨论，都需要向学校申请借教室。教室的大小功能不
同，借教室人的身份不同，借教室的手续也不一样。
面对海量租借教室的信息，我们自然希望编程解决这个问题。我们需要处理接下来n天的借教室信息，其中第i天学校有ri个教
室可供租借。共有m份订单，每份订单用三个正整数描述，分别为dj,sj,tj，表示某租借者需要从第sj天到第tj天租借教室（包
括第sj天和第tj天），每天需要租借dj个教室。 我们假定，租借者对教室的大小、地点没有要求。即对于每份订单，我们只需要
每天提供dj个教室，而它们具体是哪些教室，每天是否是相同的教室则不用考虑。
借教室的原则是先到先得，也就是说我们要按照订单的先后顺序依次为每份订单分配教室。如果在分配的过程中遇到一份订单
无法完全满足，则需要停止教室的分配，通知当前申请人修改订单。这里的无法满足指从第sj天到第tj天中有至少一天剩余的教
室数量不足dj个。
现在我们需要知道，是否会有订单无法完全满足。如果有，首先遇到的是哪一个申请人。
输入描述
第一行包含两个正整数n,m，表示天数和订单的数量。 
第二行包含n个正整数，其中第i个数为ri，表示第i天可用于租借的教室数量。 
接下来有m行，每行包含三个正整数dj表示租借的数量,sj租借开始天,tj结束天。 
每行相邻的两个数之间均用一个空格隔开。天数与订单均用从1开始的整数编号。
其中有1≤n,m≤10^6,0≤ri,dj≤10^9,1≤sj≤tj≤n。
输出描述
如果所有订单均可满足，则输出只有一行，包含一个整数0。否则输出需要修改订单的申请人编号(1开始)。
输入样例
4 3 
2 5 4 3
2 1 3 
3 2 4 
4 2 4
输出样例
2
*/
#include<iostream>
#include<cstring>
#include<cstdio>
using namespace std;
#define MAX 1000010
struct{
	int d,s,t;//数量，开始天，结束天 
}ord[MAX];
int i,n,m,ans,sum;
int r[MAX],pre[MAX];//r表示第i天可以租借的教室数量 

int judge(int x){
	memset(pre,0,sizeof(pre));
	sum=0;
	for(i=1;i<=x;i++) 
	{
		pre[ord[i].s]+=ord[i].d;
		pre[ord[i].t+1]-=ord[i].d; 
	 } 
	 for(i=1;i<=n;i++)
	 {
	 	sum+=pre[i];
	 	if(sum>r[i]) return 0;
	 }
	 return 1; 
}

int main()
{
	scanf("%d%d",&n,&m);
	for(i=1;i<=n;i++)
		scanf("%d",&r[i]);
	for(i=1;i<=m;i++)
		scanf("%d%d%d",&ord[i].d,&ord[i].s,&ord[i].t);
	int left=1,right=m,mid;
	while(left<=right)
	{
		mid=(left+right)/2;
		if(judge(mid)) left=mid+1;
		else
		{
			ans=mid;
			right=mid-1;
		}
	}
	if(!ans) printf("0");
	else printf("%d",ans);
	return 0;
}

/*************************************************************************************************************/

/*************************************************************************************************************/

/*************************************************************************************************************/








