/*************************************************************************************************************************/
/*
1020. 月饼 (25)
月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、
以及市场的最大需求量，请你计算可以获得的最大收益是多少。 
注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有3种月饼，其库存量分别为18、15、10万吨，
总售价分别为75、72、45亿元。如果市场的最大需求量只有20万吨，那么我们最大收益策略应该是卖出全部15万吨第2种月饼、
以及5万吨第3种月饼，获得 72 + 45/2 = 94.5（亿元）。
输入格式： 
每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N表示月饼的种类数、以及不超过500（以万吨为单位）
的正整数D表示市场最大需求量。随后一行给出N个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出N个正数表示每种
月饼的总售价（以亿元为单位）。数字间以空格分隔。
输出格式： 
对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后2位。
输入样例：
3 20
18 15 10
75 72 45
输出样例：
94.50
*/ 
#include<iostream>
#include<cstdio> 
#include<algorithm>
 using namespace std;
 struct mooncake
 {
     double a;//库存 
     double b;//单价 
     double c;//性价比 
 } aa[1100];
 bool cmp(mooncake n,mooncake m)
 {
     return n.c>m.c;
 }
 int main()
 {
     int n,m;
     cin>>n>>m;
     double sum=0;
     for(int i=0; i<n; i++)
         cin>>aa[i].a;
     for(int j=0; j<n; j++)
         cin>>aa[j].b;
     for(int i=0; i<n; i++)
         aa[i].c=aa[i].b/aa[i].a;
     sort(aa,aa+n,cmp);
     for(int i=0; i<n; i++)
     {
         if(aa[i].a<=m)
         {
             m-=aa[i].a;
             sum+=aa[i].b;
         }
         else if(aa[i].a>m)
         {
             sum+=aa[i].c*m;
             break;
         }
     }
     printf("%.2f\n",sum);
     return 0;
 }
/*************************************************************************************************************************/
/*
1455.贪心题-服务顺序 (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
 n个客户同时向服务器申请服务，每个客户需要的服务时间是t[i], 服务器一次只能服务一个客户，并且服务完成才能服务下一个客户。
 在未进行服务前，客户必须等待。需要给出一个服务顺序，使得n个客户的总等待时间最短。
输入描述
测试数据第一行是正整数n(n<=1000)，表示有n个顾客。接下来的1行中，有n个正整数，表示n个顾客需要的服务时间ti(ti<=1000)。
输出描述
输出最小平均等待时间，每个答案一行，保留2位小数。
输入样例
10
56 12 1 99 1000 234 33 55 99 812
输出样例
532.00
*/ 
#include<iostream>
#include<algorithm> 
#include<cstdio>
using namespace std;

int main()
{
	int n;
	double sum=0;
	cin>>n;
	int t[n];
	for(int i=0;i<n;i++)
		cin>>t[i];
	sort(t,t+n);
	//sum=t[0];
	for(int i=0;i<n;i++)
	{
		double ss=t[i]*(n-i);
		sum+=ss;	
	}
//	for(int i=0;i<n;i++)
//		cout<<' '<<t[i];
	printf("%.2f",sum/n*(1.0));
	
	return 0;
}
/*************************************************************************************************************************/
/*
1456.贪心题-最大矩阵 (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
有一个二维矩阵 A 其中每个元素的值为 0 或 1 。
移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 0 都更改为 1，将所有 1 都更改为 0。
在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。
返回尽可能高的分数。
示例：
输入：[[0,0,1,1],[1,0,1,0],[1,1,0,0]]
输出：39 
解释： 转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]] 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
输入描述
输入一个矩阵(提示:自行判断矩阵行数列数)
输出描述
反转后矩阵最大值
输入样例
[[0,0,1,1],[1,0,1,0],[1,1,0,0]]
输出样例
39
*/
//#include<bits/stdc++.h>
#include<iostream>
#include<cstring>
 
using namespace std;
int  aa[1000][4],bb[10000];
char str[10000];
int main()
{
	cin>>str;
	int count=0;
	int row=0;
	for(int i=0;i<strlen(str);i++)
		if(str[i]>='0'&&str[i]<='1')
			bb[count++]=str[i]-'0';	
	for(int i=0;i<strlen(str);i++)
		if(str[i]==']')
			row++;
	row=row-1;
	row=count/row;
	int k=0;	
	for(int i=0;i<count/row;i++)
	{
		for(int j=0;j<row;j++)
			aa[i][j]=bb[k++];
	}	
	//行的转换
    for(int i=0;i<count/row;i++)
    {
        if(aa[i][0]==0)
        {
            for(int j=0;j<row;j++)
            {
                if(aa[i][j]==0) aa[i][j]=1;
                else aa[i][j]=0;
            }
        }
    }
    //列的转换 
	for(int j=0;j<row;j++)
        {
        int count0=0;
        int count1=0;
            for(int i=0;i<count/row;i++)
            {
                 if(aa[i][j]==0) count0++;
                 if(aa[i][j]==1) count1++;
            }
            if(count0>count1)
            {
                for(int i=0;i<row;i++)
                {
                    if(aa[i][j]==0) aa[i][j]=1;
                    else aa[i][j]=0;
                }
            }

        }
	int sum = 0;
        for(int i = 0;i<count/row;i++)
        {
            int sumRow = 0;
            for(int j = 0;j<row;j++)
            {
                sumRow = sumRow*2 + aa[i][j];
            }
            sum+=sumRow;
        }
		cout<<sum;
	return 0;
}





/*************************************************************************************************************************/
