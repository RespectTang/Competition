/*******************************************************************************************************************/
二分图的百科：https://baike.baidu.com/item/二分图/9089095?fr=aladdin
匈牙利算法：https://blog.csdn.net/dark_scope/article/details/8880547
KM算法图解：https://www.cnblogs.com/logosG/p/logos.html
/*******************************************************************************************************************/
HDU 2444 二分图最大匹配问题（染色法+匈牙利算法）
参考资料网址：https://blog.csdn.net/pkuxy/article/details/44264755
hint：
分析：
第一步，判断能否分成两组，即判定所给图是否是二分图，
染色法：选定一个起点，把该点染成黑色，以该点开始进行dfs，
搜到相邻的点，如果该点没染过色，则把该点染成与它的前驱节点相反的颜色，
如果搜到一个节点与它的前驱节点颜色相同，则说明不是二分图。

第二步，求最大匹配直接用匈牙利算法
/*******************************************************************************************************************/
code：
/*
655.二分图-安排房间 (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
有一群学生，他们之间有的认识有的不认识。
现在要求把学生分成2组，其中同一个组的人相互不认识。如果你分成功了，那么就安排双人间，安排的规矩
是两个人分别属于不同的组，并且认识。
输入描述
首先输入两个整数n,m，表示有n个学生， m个认识对
随后m行表示认识的学生对。
输出描述
如果不能分组成功则输出“No”
否则输出有多少个房间安排学生配对。
输入样例
4 4
1 2
1 3
1 4
2 3
6 5
1 2
1 3
1 4
2 5
3 6
输出样例
No
3
*/
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
const int MAXN=210;
int n,m;
int nextpt[MAXN];
int mp[MAXN][MAXN];
int color[MAXN];
bool vis[MAXN];
bool flag;

void judge(int x,int cr)
{
	if(flag==false) return;
	for(int i=1;i<=n;i++)
	{
		if(mp[x][i])
		{
			if(!color[i])
			{
				color[i]=-cr;
				judge(i,color[i]);
			}
			else if(color[i]==cr)
			{
				flag=false;
				return;
			}
		}
	}
}

bool isBipGraph()
{
	flag=true;
	color[1]=1;
	judge(1,1);
	return flag;
}

bool dfs(int s)
{
	for(int i=1;i<=n;i++)
	{
		if(!vis[i]&&mp[s][i]!=0)
		{
			vis[i]=1;
			if(nextpt[i]==-1||dfs(nextpt[i]))
			{
				nextpt[i]=s;
				return true;
			}
		}
	}
	return false;
}

void init()
{
	memset(color,0,sizeof(color));
	memset(mp,0,sizeof(mp));
	memset(nextpt,-1,sizeof(nextpt));
}

int main()
{
	int x,y;
	while(~scanf("%d%d",&n,&m))
	{
		init();
		for(int i=1;i<=m;i++)
		{
			scanf("%d%d",&x,&y);
			mp[x][y]=1;
		}
		if(isBipGraph())
		{
			int ans=0;
			for(int i=1;i<=n;i++)
			{
				memset(vis,0,sizeof(vis));
				if(dfs(i)) ans++;
			}
			printf("%d\n",ans);
		}
		else printf("No\n");
	}
	return 0;
}
/*******************************************************************************************************************/
HDU 2853 
参考资料：
https://blog.csdn.net/clover_hxy/article/details/70136027
https://blog.csdn.net/u013480600/article/details/38736501
/*******************************************************************************************************************/
分析:
       首先如果我们只需要求最大权值匹配，那么这道题是一个左右点集大小不对称的最优匹配问题。这里要注意KM算法模板的修改。
       最优权值匹配很好求，直接用KM模板，但是要在原匹配边的基础上使得改变的边最少，这里我们这么处理：
       这里由于左边点集有N个点，且M>=N。那么最终的最优匹配必然有N条边。我们让原图中的每条边的权值都乘以(N+1)，即扩大N+1倍。
       且如果某条边本来就是原匹配用的其中一条边，那么该边权值在扩大N+1倍后，再加1。 所以任意一条边的权值只能是N+1的倍数 或
       (N+1的倍数)+1，我们将要在这种权值的边中选出N条来(想想如果我们最终在新二分图求出的最优权值和==(N+1)的倍数,那么说明什么?
       说明我们最优匹配中,一条老边都没有复用.虽然老边的权值有加1的优势 )。
       最终我们得到的最优权值和ans除以(N+1)就是最优权值解(因为就算我们原封不动的还用以前的匹配,也就是在所有权值的基础上加了
       N个1,此时/(N+1),整除归0)。
        最终ans%(N+1)就是我们复用旧边的条数(上述两条结论仔细验证)。
        下面来论证一下为什么上面的”所有边权值*(N+1),老边还+1”这个策略可行?

        假设原图有唯一最优权值的解(即所有其他的匹配方案边的权值总和都要小于该解的权值和)。
        那么”所有边权值*(N+1),老边还+1”之后.假设原先次优解的权值只比最优解的权值少1,
        且次优解匹配用的都是原匹配边(即操作后次优解权值和增加的最多)
        且最优解匹配用的都是原非匹配边(即最优解权值和增加的最少). 
        就算是这样,操作后,最优解的权值依然正好比次优解权值和大1. 
        所以如果最优解唯一,我们不会丢失最优解.
       下面假设原图最优解方案不唯一,即有多个最优解方案可以得到最优解. 当时我们能肯定 那个用到老边最多的最优解方案 在我们”所有
       边权值*(N+1),老边还+1”操作后,其权值必然是所有解里面最大的. 即它变成了新的最优解,我们自然选它.
       上述两段论证了为什么我们”所有边权值*(N+1),老边还+1”这个操作的可行性.
/*******************************************************************************************************************/
/*
654.二分图-任务安排 (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
有n个机器，m个任务， m>=n,  i个机器完成j任务时的效率是e(i,j).
每个机器只执行一个任务，每个任务只需一个机器。现有一个任务执行计划
（a1,a2....,an）,其中ai是机器i执行的任务。
要求调整机器执行的任务，使得效率的和最大。如果有多种方案调整，给出调整次数
最少的那次。
输入描述
可能有多个测试用例。
对每个测试用例，第一行是n,m
然后n行是nxm的矩阵，表示e(i,j)
接下来是a1,a2,...an
输出描述
输出两个整数x,y,其中x是调整的次数， y是最大的效率和的增加值
输入样例
3 3
2 1 3
3 2 4
1 26 2
2 1 3
2 3
1 2 3
1 2 3
1 2
输出样例
2 26
1 2
*/ 

#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<cstdlib>
using namespace std;

#define MAXN 320
#define INF 0x3f3f3f3f

int n,m,pdx[MAXN],pdy[MAXN],cx[MAXN],cy[MAXN],belong[MAXN],slack[MAXN],val[MAXN][MAXN];
bool dfs(int x)
{
	pdx[x]=1;
	for(int i=1;i<=m;i++)
	{
		if(pdy[i]) continue;
		int gap=cx[x]+cy[i]-val[x][i];
		if(!gap)
		{
			pdy[i]=1;
			if(!belong[i]||dfs(belong[i]))
			{
				belong[i]=x;
				return true;
			}
		}else slack[i]=min(gap,slack[i]);
	}
	return false;
}

int km()
{
	memset(belong,0,sizeof(belong));
	memset(cy,0,sizeof(cy));
	for(int i=1;i<=n;i++)
	{
		cx[i]=val[i][1];
		for(int j=2;j<=m;j++) 
			cx[i]=max(cx[i],val[i][j]);
	}
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=m;j++)
			slack[j]=INF;
		while(true)
		{
			memset(pdx,0,sizeof(pdx));
			memset(pdy,0,sizeof(pdy));
			if(dfs(i)) break;
			int d=INF;
			for(int j=1;j<=m;j++)
				if(!pdy[j])
					d=min(d,slack[j]);
			for(int j=1;j<=n;j++)
				if(pdx[j])
					cx[j]-=d;
			for(int j=1;j<=m;j++)
				if(pdy[j]) cy[j]+=d;
				else slack[j]-=d;
		}
	}
	int ans=0;
	for(int i=1;i<=m;i++)
		ans+=val[belong[i]][i];
	return ans;
}

int main()
{
	while(scanf("%d%d",&n,&m)!=EOF)
	{
		for(int i=1;i<=n;i++)
			for(int j=1;j<=m;j++)
			{
				scanf("%d",&val[i][j]);
				val[i][j]*=10000;
			}
		int sum=0;
		for(int i=1;i<=n;i++)
		{
			int x;
			scanf("%d",&x);
			sum+=val[i][x];
			val[i][x]++;	
		}		
		sum/=10000;
		int ans=km();
		printf("%d %d\n",n-ans%10000,ans/10000-sum);
	}
	return 0;
}
/*******************************************************************************************************************/
本题hint：
HDU 2853 Assignment
https://blog.csdn.net/u013480600/article/details/38736501
/******************************************************************************************************************/
/*******************************************************************************************************************/
/*******************************************************************************************************************/
/*******************************************************************************************************************/
