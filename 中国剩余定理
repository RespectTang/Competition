中国剩余定理
中国剩余定理是中国古代求解一次同余式组（见同余）的方法。是数论中一个重要定理。又称孙子定理。
用现代数学的语言来说明的话，中国剩余定理给出了下图所示的一元线性同余方程组有解的判定条件，
说明：假设整数m1,m2, … ,mn两两互质，则对任意的整数：a1,a2, … ,an，方程组 有解，并且通解可以用如下方式构造得到：
设 M = m1*m2*…*mn 是整数m1,m2, … ,mn的乘积，并设 Mi = M/mi 是除了mi以外的n-1个整数的乘积。
设 ti = Mi^(-1) 为 Mi 模 mi 的数论倒数(ti 为 Mi 模 mi 意义下的逆元) 
Mi*ti ≡ 1(mod mi),i∈{1,2,3,…,n} 
方程组 (S) 的通解形式为 
x = k*M + ∑(ai*ti*Mi),i∈{1,2,3,…,n},k∈Z 
在模 M 的意义下，方程组(S)只有一个解如下图所示 

代码实现
互质
//求M%A=a,M%B=b,...中的M，其中A,B,C...互质
int CRT(int a[],int m[],int n){  
    int M = 1;  
    int ans = 0;  
    for(int i=1; i<=n; i++)  
        M *= m[i];  
    for(int i=1; i<=n; i++){  
        int x, y;  
        int Mi = M / m[i];  
        ex_gcd(Mi, m[i], x, y);  
        ans = (ans + Mi * x * a[i]) % M;  
    }  
    if(ans < 0) ans += M;  
    return ans;  
}  

非互质
一般的中国剩余定理要求mi两两互质，但是保证互质条件太苛刻了，若mi并不满足两两互质时，就要采用两两合并的思想，假设要合并如下两个方程 
x=a1+m1*x1 
x=a2+m2*x2
得到 
a1+m1*x1 = a2+m2*x2 → m1*x1+m2*x2 = a2-a1
再通过扩展欧几里得算法解出x1的最小正整数解，代入 
x=a1+m1*x1
得到x后合并为一个方程的结果为 
y ≡ x(mod lcm(m1,m2))
这样一直合并下去，最终可以求得同余方程组的解。
下面来看代码：
bool merge(LL a1, LL m1, LL a2, LL m2, LL &a3, LL &m3)  {  
    LL d = gcd(m1, m2);  
    LL c = a2 - a1;  
    if(c % d) return false;  
    c = (c % m2 + m2) % m2;  
    m1 /= d;  
    m2 /= d;  
    c /= d;  
    c *= Inv(m1, m2);//Inv为乘法逆元，数论常用内容——欧几里得算法与扩展欧几里得算法
    c %= m2;  
    c *= m1 * d;  
    c += a1;  
    m3 = m1 * m2 * d;  
    a3 = (c % m3 + m3) % m3;  
    return true;  
}  

LL CRT(LL a[], LL m[], int n)  {  
    LL a1 = a[1];  
    LL m1 = m[1];  
    for(int i=2; i<=n; i++)  {  
        LL a2 = a[i];  
        LL m2 = m[i];  
        LL m3, a3;  
        if(!merge(a1, m1, a2, m2, a3, m3))  
            return -1;  
        a1 = a3;  
        m1 = m3;  
    }  
    return (a1 % m1 + m1) % m1;  
}  

/**************************************************************************
题目内容：
数一堆硬币，x1个一拨，则余下y1个；
x2个一拨，则余下y2个；
。。。
xn个一拨，则余下yn个；
问最少有几个硬币
输入描述
第一行输入整数n
第二行是x1 x2 .. xn
第三行是y1 y2 .. yn
输出描述
最少的硬币数目
输入样例
2
14 57
5 56
输出样例
341
/*******************************************************************************/
#include<iostream>
#include<cstdio>
using namespace std;
int M[10],R[10];
typedef long long LL;
LL gcd(LL a,LL b){
while(a&&b) a>b?a=a%b:b=b%a;
return a+b;
}
LL ext_gcd(LL a,LL b, LL& x, LL& y){
if(b==0){
x=1,y=0;
return a;
}
LL d = ext_gcd(b, a%b, x, y);
LL tx = x;
x = y;
y = tx - a / b * y;
return d;
}
/*
中国剩余定理求解多个同余方程(模不互质的情况):
N = r1 (mod m1)
N = r2 (mod m2)
N = k1*m1 + r1 = k2*m2 + r2
k1*m1 - k2*m2 = r2 - r1 = r 
令 a = m1, b = m2, x = k1, y = -k2
即 a*x + b*y = r;
d = ext_gcd(a,b,x0,y0) 扩展gcd计算a,b的最大公约数d和特解x0、y0,使得方程a*x0 + b*y0 = d成立 
if(r % d == 0) 有解,且有如下通解： 
x = x0 + t * b / d
y = y0 - t * b / d
两边同乘以r/d得： a * (x0 * r / d) + b * (y0 * r / d) = r;
则原方程的解 x = x0 * r / d;
又 有 
N = m1 * k1 + r1 
= a * x + r1
= a * (x0 + t * b / d) + r1
= t * (a * b / d) + a * x0 + r1
= a * x0 + r1 ( mod (a * b / d) ) ----(1) 
需要注意的是，这里的x0是a*x + b*y=d的解，而我们要求的是 a*r + b*y=r的解， 
所以需要用 x = x0 * r / d 来替换式(1)中的 x0 
这样就将两个同余方程合并为了一个同余方程，接下来继续同样的操作，最后剩下一个方程，
即可求出N的值
*/
LL china_remain(int n){
LL a = M[0], r1=R[0];
LL x0,y0;
for(int i=1; i<n; ++i){
LL b=M[i],r2=R[i];
LL r = r2 - r1;
LL d = ext_gcd(a,b,x0,y0);
if(r % d) return -1; //无解 
LL x = x0 * r / d; //求原方程的解 
LL t = b / d;
//将x化为原方程的最小正整数解 
x = ((x % t) + t) % t;
r1 = a * x + r1;
a = a * b / d; //新的a 为 a和b的最小公倍数,LCM(a,b) = a*b/GCD(a,b)
}
if(r1 == 0){
r1 = 1;
for(int i=0;i<n;++i) r1 = r1 * M[i] / gcd(r1,M[i]);
printf("r1==0\n");
}
return r1;
}
int main(){
int n;
scanf("%d",&n);
for(int i=0;i<n;++i) scanf("%lld",&M[i]);
for(int i=0;i<n;++i) scanf("%lld",&R[i]);
printf("%lld",china_remain(n));
return 0;
参考资料来源：
https://blog.csdn.net/tick_tock97/article/details/71313058
https://www.cnblogs.com/MashiroSky/p/5918158.html
https://blog.csdn.net/hushhw/article/details/76281352
