/*
1463.KMP---字符串问题2 (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
给定两个字符串A和B，请你求出字符串A最少重复几次才能使得B是A的子串.
例如A="hiho"，B="hohihohi"。则A重复3次之后变为"hihohihohiho"，这时B是A的子串。

题目链接：http://hihocoder.com/problemset/problem/1625
输入描述
输入包含多组数据.
第一行包含一个整数T，表示数据组数。 (1 ≤ T ≤ 5) 
对于每组数据，第一行包含一个字符串A，第二行包含一个字符串B.
输出描述
A最少重复的次数。如果无论重复多少次也不能包含B，输出-1。
输入样例
2
hiho  
hohihohi  
hiho  
coder
输出样例
3
-1
*/ 
#include<iostream>
#include<cstring>
#include<string>
#include<cstdio>
using namespace std;
string A,B;
int next[100009];
int KMP(string s,string p)
{
	int len1=s.length();
	int len2=p.length();
	memset(next,0,sizeof(next));
	int i=0,j=0,t=-1;
	next[0]=-1;
	while(j<len2)
	{
		if(t<0||p[j]==p[t])
		{
			j+=1;
			t+=1;
			next[j]=t;
		}
		else
		{
			t=next[t];	
		}
	}
	i=0;
	j=0;
	while(i<len1&&j<len2)
	{
		if(j<0||s[i]==p[j])
		{
			if(j+1==len2) return i-j;
			i+=1;
			j+=1;
		}
		else j=next[j];
	}
	return -1;
}

int main()
{
	int T;
	cin>>T;
	while(T--)
	{
		cin>>A>>B;
		int lena=A.length();
		int lenb=B.length();
		int timesa=(lenb-1)/lena+1;
		string t="";
		for(int i=0;i<timesa;i++)
			t+=A;
		if(KMP(t,B)!=-1)
		{
			cout<<timesa<<endl;
			continue;
		}
		t+=A;
		if(KMP(t,B)==-1)
		{
			cout<<"-1"<<endl;
		}
		else
		{
			cout<<timesa+1<<endl;
		}
		
	}
}
/****************************************************************************************************************/
/*
1462.KMP---字符串问题 (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
 有一个字符串 让你找到这个字符串 S 里面的子串T 这个子串 T 必须满足
既是这个串的前缀 也是这个 串的后缀 并且 在字符串中也出现过一次的
(提示 要求满足前后缀的同时也要在字符串中出现一次 只是前后缀是不行的 输出最长满足要求字符串)
题目链接：https://www.nowcoder.com/acm/contest/77/C
输入描述
给出一个字符串 长度 1 到 1e6  全部是小写字母
输出描述
如果找的到就输出这个子串T 如果不行就输出 Just a legend
输入样例
fixprefixsuffix
输出样例
fix
*/

#include<iostream>
#include<cstring>
using namespace std;
#define maxn 1000000
string str;
int nex[maxn];
int s=0;
void get_nex(){              //获得next 数组
   nex[0]=-1;
   int k=-1,j=0;
   while(j<s){
      if(k==-1||str[j]==str[k]){
          j++;
          k++;
          nex[j]=k;
      }
      else k=nex[k];
   }
}

bool kmp(int len){                                  //kmp字符串匹配
    for(int i=1,j=0;i<s-1;i++){
        while(j>0&&str[i]!=str[j]) j=nex[j];
        if(str[i]==str[j]) j++;
        if(j==len) return true;
    }
    return false;
}

bool xxx(int len){                        //获取长度

    for(int j=0;j<len;j++){
       if(str[j]!=str[s-len+j]) return false;
    }
    return true;
}

bool work(){
   for(int j=s-2;j>=1;j--){
      if(xxx(j)){
         if(kmp(j)){
            for(int k=0;k<j;k++){
               cout<<str[k];
            }
            return true;
         }
      }
   }
   return false;
}                                   

int main(){         
   cin>>str;                     
   s=str.size();            
   get_nex();
   if(!work()){
      cout<<"Just a legend"<<endl;
   }
    return 0;

}
/*****************************************************************************************************************/
/*
1461.KMP---Number Sequence (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
 给定两个数组a、b，问能不能在第一个数组中匹配得到第二个数组，如果可以，那么输出最早匹配的
起始位置，否则输出-1（a数组的长度<=100000, b数组的长度<=10000）
输入描述
第一行输入两个整数m、n，分别代表数组a和b的长度
第二行输入m个整数，代表数组a
第三行输入n个整数，代表数组b
输出描述
如果能匹配，输出一个整数，代表最早匹配的起始位置
如果不能匹配，输出-1
输入样例
13 5
1 2 1 2 3 1 2 3 1 3 2 1 2
1 2 3 1 3
输出样例
6
*/
#include<iostream>
#include<cstring>
#include<cstdio>
using namespace std;
int next[100005];
int a[100005],b[10005];
int m,n;
void get_next(int p[])
{
   next[0]=-1;
   int i=0,j=-1;
   while(i<m){
      if(j==-1||b[j]==b[i]){
          j++;
          i++;
          if(b[i]!=b[j]) next[i]=j;
          else next[i]=next[j];
      }
      else j=next[j];
   }
}
int KMP()
{
	int i=0,j=0;
    while(i<n&&j<m)
    {
    	if(j==-1||a[i]==b[j])
		{
			i++;j++;
		}
		else j=next[j];
	}
	if(j==m) return i-m+1;
    else return -1;
}

int main()
{
	cin>>n>>m;
	for(int i=0;i<n;i++)
		cin>>a[i];
	for(int i=0;i<m;i++)
		cin>>b[i];
	get_next(b);
	cout<<KMP()<<endl;
	return 0;
	
}



