/***************************************************************************************************************************/

/*
 646.高斯消元-平方数 (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
n个整数a1,a2,...an，每个数ai的质因子不超过2000. 现从中选取一些数，
它们的乘积刚好是平方数。
问有多少种挑选方案。 假定n<=300, ai<=2000
输入描述
第一行是n
第二行是n个整数
输出描述
方案数。为防止数目过大，结果需模1000000007.
输入样例
3
3 3 4
输出样例
3
*/ 
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cmath>
using namespace std;
typedef long long ll;
const int MAXN=305;
const ll MOD=1000000007;
int n;
ll a[MAXN][MAXN];
ll num[MAXN];
int x[MAXN];
bool free_x[MAXN];
int prime[303];

inline int gcd(int a,int b)
{
	return b==0?a:gcd(b,a%b);
}

inline int lcm(int a,int b)
{
	return a/gcd(a,b)*b;
}

int Gauss(int equ,int var)
{
	int i,j,k;
	int max_r;
	int col;
	int LCM;
	for(int i=0;i<=var;i++)
	{
		x[i]=0;
		free_x[i]=true;
	}
	col=0;
	for(k=0;k<equ&&col<var;k++,col++)
	{
		max_r=k;
		for(i=k+1;i<equ;i++)
		{
			if(abs(a[i][col])>abs(a[max_r][col])) max_r=i;
		}
		if(max_r!=k)
		{
			for(j=k;j<var+1;j++)
				swap(a[k][j],a[max_r][j]);
		}
		if(a[k][col]==0)
		{
			k--;
			continue;
		 } 
		for(i=k+1;i<equ;i++)
		{
			if(a[i][col]!=0)
			{
				for(j=col;j<var+1;j++)
				{
					a[i][j]^=a[k][j];
				}
			}
		}
	}
	return var-k;
}

bool isPrime(int x)
{
	for(int i=2;i<=sqrt(x)+1;i++)
	{
		if(x%i==0)
			return false;
	}
	return true;
}

void init()
{
	int cnt=0;
	prime[cnt++]=2;
	for(int i=3;i<2000;i++)
	{
		if(isPrime(i))
			prime[cnt++]=i;
	}
}

ll quickmod(ll a,ll b,ll m)
{
	ll ans=1;
	while(b)
	{
		if(b&1)
		{
			ans=(ans*a)%m;
			b--;
		}
		b/=2;
		a=a*a%m;
	}
	return ans;
}

int main()
{
	init();
	memset(a,0,sizeof(a));
	cin>>n;
	for(int i=0;i<n;i++)
		cin>>num[i];
	for(int i=0;i<303;i++)
	{
		int tmp;
		for(int j=0;j<n;j++)
		{
			tmp=0;
			while(num[j]%prime[i]==0)
			{
				num[j]/=prime[i];
				tmp++;
			}
			a[i][j]=tmp%2;
		}
	}
	ll ans=(quickmod(2,Gauss(303,n),MOD)+MOD)%MOD-1;
	cout<<ans<<endl;
}


/***************************************************************************************************************************/
/*
1467.高斯消元-Lanterns (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
Alice has received a beautiful present from Bob. The present contains n lanterns and m switches.
 Each switch controls some lanterns and pushing the switch will change the state of all lanterns 
 it controls from off to on or from on to off. A lantern may be controlled by many switches. At
  the beginning, all the lanterns are off. 
Alice wants to change the state of the lanterns to some specific configurations and she knows
 that pushing a switch more than once is pointless. Help Alice to find out the number of ways 
 she can achieve the goal. Two ways are different if and only if the sets (including the empty
  set) of the switches been pushed are different.
 输入描述
The first line contains an integer T (T<=5) indicating the number of test cases.
The first line of each test case contains an integer n (1<=n<=50) and m (1<=m<=50).
Then m lines follow. Each line contains an integer k (k<=n) indicating the number of lanterns
 this switch controls.
Then k integers follow between 1 and n inclusive indicating the lantern controlled by this switch.
The next line contains an integer Q (1<=Q<=1000) represent the number of queries of this test case.
Q lines follows. Each line contains n integers and the i-th integer indicating that the state 
(1 for on and 0 for off) of the i-th lantern of this query.
输出描述
For each test case, print the case number in the first line. Then output one line containing 
the answer for each query.
Please follow the format of the sample output.
输入样例
2
3 2
2 1 2
2 1 3
2
0 1 1
1 1 1
3 3
0
0
0
2
0 0 0
1 0 0
输出样例
Case 1:
1
0
Case 2:
8
0
问题描述              
爱丽丝收到了鲍伯的一件漂亮礼物。现在包含N个灯和M个开关。每个开关控制
着一些灯笼和推动开关改变状态的灯笼它控制从去上或从上到下。灯笼可以由许
多开关控制。开始时，所有的灯笼都熄灭了。              
爱丽丝想改变灯笼国家一些特定的配置和她知道推动开关一次以上是毫无意义的。
帮助爱丽丝找到她的方法可以达到目标的数量。两种方法都不同，若集（包括空集）
的开关被推是不同的。              
输入              
第一行包含一个整数T（T≤5）表示测试用例的数目。              
每个测试案例的第一行包含一个整数N（1≤N≤50）和M（1 <= M = 50）。              
然后遵循M线。每行包含一个整数k（k≤n）表示数量的灯笼这个开关控制。              
然后K个整数1和n包容性的指示灯的开关控制之间的关系。              
下一行包含一个整数q（1 <= q <= 1000）代表这个测试案例的查询数。              
Q线如下。每行包含N个整数，第i个整数表示状态（1和0为关闭）的这个查询的第i个灯笼。              
产量              
对于每一个测试案例，打印在第一行的例数。然后输出包含每个查询答案的一行。              
请按照样本输出格式。
*/ 
 
#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
#define MAXN 55
using namespace std;

int a[MAXN][MAXN];
int b[MAXN][MAXN];
 
int Gauss(int n,int m)
{
	int col=0;
	int max_r;
	int k;
	for(k=0;col<m&&k<n;k++,col++)//枚举当前处理的行 
	{
		max_r=k;
		for(int i=k+1;i<n;i++)//绝对值较大的那一行作交换 
			if(abs(a[i][col])>abs(a[max_r][col])) max_r=i;
		if(max_r!=k)
			for(int j=k;j<=m;j++) swap(a[max_r][j],a[k][j]);
		if(!a[k][col]){
			k--;
			continue;
		} 
		for(int i=k+1;i<n;i++)
		{
			if(a[i][col])
			{
				for(int j=col;j<=m;j++)
				{
					a[i][j]^=a[k][j];
				}
			}
		}
	}
	for(int i=k;i<n;i++)//无解的情况 
		if(a[i][col]) return -1;
	if(k<m)
		return m-k;	
	return 0; 
}

int main()
{
	int T;
	scanf("%d",&T);
	int xp=0;
	while(T--)
	{
		int m,n,k,d;
		memset(b,0,sizeof(b));
		memset(a,0,sizeof(a));
		scanf("%d%d",&n,&m);
		for(int i=0;i<m;i++)
		{
			scanf("%d",&k);
			for(int j=0;j<k;j++)
			{
				scanf("%d",&d);
				b[d-1][i]=1;
			}
		}
		int Q;
		scanf("%d",&Q);
		printf("Case %d:\n",++xp);
		while(Q--)
		{
			memcpy(a,b,sizeof(b));
			for(int i=0;i<n;i++)
			{
				scanf("%d",&d);
				a[i][m]=d;
			}
			int res=Gauss(n,m);
			if(res<0) printf("0\n");
			else printf("%I64d\n",1LL<<(res));
		}
		
	}
	return 0;
}
/*
参考资料
https://blog.csdn.net/ydd97/article/details/47402217
https://blog.csdn.net/pengwill97/article/details/77200372 
*/ 

/***************************************************************************************************************************/
板子
#include<stdio.h>
    #include<algorithm>
    #include<iostream>
    #include<string.h>
    #include<math.h>
    using namespace std;
    const int MAXN=50;
    int a[MAXN][MAXN];//增广矩阵
    int x[MAXN];//解集
    bool free_x[MAXN];//标记是否是不确定的变元
    int gcd(int a,int b){
        if(b == 0) return a; else return gcd(b,a%b);
    }
    inline int lcm(int a,int b){
        return a/gcd(a,b)*b;//先除后乘防溢出
    }
    // 高斯消元法解方程组(Gauss-Jordan elimination).(-2表示有浮点数解，但无整数解，
    //-1表示无解，0表示唯一解，大于0表示无穷解，并返回自由变元的个数)
    //有equ个方程，var个变元。增广矩阵行数为equ,分别为0到equ-1,列数为var+1,分别为0到var.
    int Gauss(int equ,int var){
        int i,j,k;
        int max_r;// 当前这列绝对值最大的行.
        int col;//当前处理的列
        int ta,tb;
        int LCM;
        int temp;
        int free_x_num;
        int free_index;

        for(int i=0;i<=var;i++){
            x[i]=0;
            free_x[i]=true;
        }

        //转换为阶梯阵.
        col=0; // 当前处理的列
        for(k = 0;k < equ && col < var;k++,col++){// 枚举当前处理的行.
        // 找到该col列元素绝对值最大的那行与第k行交换.(为了在除法时减小误差)
            max_r=k;
            for(i=k+1;i<equ;i++){
                if(abs(a[i][col])>abs(a[max_r][col])) max_r=i;
            }
            if(max_r!=k){// 与第k行交换.
                for(j=k;j<var+1;j++) swap(a[k][j],a[max_r][j]);
            }
            if(a[k][col]==0){// 说明该col列第k行以下全是0了，则处理当前行的下一列.
                k--;
                continue;
            }
            for(i=k+1;i<equ;i++){// 枚举要删去的行.
                if(a[i][col]!=0){
                    LCM = lcm(abs(a[i][col]),abs(a[k][col]));
                    ta = LCM/abs(a[i][col]);
                    tb = LCM/abs(a[k][col]);
                    if(a[i][col]*a[k][col]<0)tb=-tb;//异号的情况是相加
                    for(j=col;j<var+1;j++){
                        a[i][j] = a[i][j]*ta-a[k][j]*tb;
                    }
                }
            }
        }
        // 1. 无解的情况: 化简的增广阵中存在(0, 0, ..., a)这样的行(a != 0).
        for (i = k; i < equ; i++){ // 对于无穷解来说，如果要判断哪些是自由变元，那么初等行变换中的交换就会影响，则要记录交换.
            if (a[i][col] != 0) return -1;
        }
        // 2. 无穷解的情况: 在var * (var + 1)的增广阵中出现(0, 0, ..., 0)这样的行，即说明没有形成严格的上三角阵.
        // 且出现的行数即为自由变元的个数.
        if (k < var){
            return var - k; // 自由变元有var - k个.
        }
        // 3. 唯一解的情况: 在var * (var + 1)的增广阵中形成严格的上三角阵.
        // 计算出Xn-1, Xn-2 ... X0.
        for (i = var - 1; i >= 0; i--){
            temp = a[i][var];
            for (j = i + 1; j < var; j++){
                if (a[i][j] != 0) temp -= a[i][j] * x[j];
            }
            if (temp % a[i][i] != 0) return -2; // 说明有浮点数解，但无整数解.
            x[i] = temp / a[i][i];
        }
        return 0;
    }
    int main(void){
    //    freopen("in.txt", "r", stdin);
    //    freopen("out.txt","w",stdout);
        int i, j;
        int equ,var;
        while (scanf("%d %d", &equ, &var) != EOF){
            memset(a, 0, sizeof(a));
            for (i = 0; i < equ; i++){
                for (j = 0; j < var + 1; j++){
                    scanf("%d", &a[i][j]);
                }
            }
            int free_num = Gauss(equ,var);
            if (free_num == -1) printf("无解!\n");
            else if (free_num == -2) printf("有浮点数解，无整数解!\n");
            else if (free_num > 0){
                printf("无穷多解! 自由变元个数为%d\n", free_num);
                for (i = 0; i < var; i++){
                    if (free_x[i]) printf("x%d 是不确定的\n", i + 1);
                    else printf("x%d: %d\n", i + 1, x[i]);
                }
            }else{
                for (i = 0; i < var; i++){
                    printf("x%d: %d\n", i + 1, x[i]);
                }
            }
            printf("\n");
        }
        return 0;
    }

/***************************************************************************************************************************/
