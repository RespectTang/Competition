/*********************************************************************************************************/
从最开始的树形数组讲起
树状数组的讲解：https://blog.csdn.net/flushhip/article/details/79165701
树状数组的三种模型：https://blog.csdn.net/code12hour/article/details/46597025
/*********************************************************************************************************/
例题：Codevs 1228 苹果树
参考资料：
https://blog.csdn.net/qq_36693533/article/details/78428470
https://blog.csdn.net/xu326057825/article/details/53096241
http://www.cnblogs.com/z360/p/7544331.html
/*********************************************************************************************************/
模型：
/*
640.树形数组-树的统计 (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
这是数据结构中的树。 结点编号为1,2,...n. 其中1是根结点。 每个结点可涂
一个颜色白或者黑.操作者可以更改这个颜色。 
输入描述
第一行是结点数目n<=100000.接下来的n-1行是连接这n个结点的边ui, vi
然后的一行是整数m, 表示有m个操作， 接下来的m行就定义了具体操作：
“C x”意思是改变结点x的颜色
“Q x”意思是询问结点x为根的子树上有多少个白色结点。
假设初始时树的所有结点为白色
输出描述
每行是依次回答上面的每个Q x
输入样例
3
1 2
1 3
3
Q 1
C 2
Q 1
输出样例
3
2
*/ 

#include<iostream>
#include<cstring>
#include<cstdio>
#define MAXN 200010
using namespace std;
#define RI register int
int n,m,ru,rv,tot,pos;
int limit;//当前最大dfs序
int first[MAXN],nxt[MAXN];
int seq[MAXN];//每个点的dfs序
int c[MAXN];
char ch;
struct edge{
	int u,v;
}l[MAXN];
struct point{
	int ls,rs;//每个点dfs序，以此点为根的子树中最大的dfs序 
}p[MAXN];//以每个点为根的子树在BIT上的范围

int lowbit(int x)
{
	return x&(-x);
 } 
void build(int f,int t)
{
	l[++tot]=(edge){f,t};
	nxt[tot]=first[f];
	first[f]=tot; 
}

void dfs(int k,int fa)
{
	seq[k]=++tot;
	limit=tot;
	for(RI i=first[k];i!=-1;i=nxt[i])
	{
		int x=l[i].v;
		if(x!=fa) dfs(x,k);
	} 
	p[seq[k]].ls=seq[k];
	p[seq[k]].rs=limit;
}

void add(int k,int value)
{
	for(int i=k;i<=n;i+=lowbit(i))
		c[i]+=value;
}

int ask_sum(int l,int r)
{
	int ans=0;
	for(int i=r;i>0;i-=lowbit(i))
		ans+=c[i];
	for(int i=l-1;i>0;i-=lowbit(i))//边界 
		ans-=c[i];
	return ans;
}

int main()
{
	memset(first,-1,sizeof(first));
	cin>>n;
	for(int i=0;i<n-1;i++)
	{
		cin>>ru>>rv;
		build(ru,rv);
		build(rv,ru);
	}
	tot=0;
	dfs(1,0);
	for(int i=1;i<=n;i++)
		add(i,1);
	cin>>m;
	for(int i=0;i<m;i++)
	{
		ch=getchar();
		while(ch!='C'&&ch!='Q')
			ch=getchar();
		cin>>pos;
		if(ch=='C')
		{
			if((c[seq[pos]]-ask_sum(seq[pos]-lowbit(seq[pos])+1,seq[pos]-1))==1)//单点查询   
            //左子树及自身的值之和-ask_sum(左子树第一个元素,左子树最后一个元素)
            //或者写if(ask_sum(seq[pos],seq[pos])==1)
            add(seq[pos],-1);
            else add(seq[pos],1);
		}
		if(ch=='Q')
		{
			cout<<ask_sum(p[seq[pos]].ls,p[seq[pos]].rs)<<endl;
		}
	}
		
	return 0;
}

/*
线段树解法

#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cmath>
#define RI register int
using namespace std;
int n,m,ru,rv,tot,pos;
int limt;//当前最大dfs序 
int first[200010],nxt[200010];
int seq[100010];//每个点的dfs序 
char ch;
struct edge
{
    int u,v;
}l[200010];
struct inte
{
    int l,r,A;
}tree[400010];
struct point
{
    int ls,rs;//每个点dfs序,以此点为根的子树中最大的dfs序 
}p[100010];//以每个点为根的子树在seg上的范围 
void add(int f,int t)
{
    l[++tot]=(edge){f,t};
    nxt[tot]=first[f];
    first[f]=tot;
}
void dfs(int k,int fa)
{
    seq[k]=++tot;
    limt=tot;
    for(RI i=first[k];i!=-1;i=nxt[i])
    {
        int x=l[i].v;
        if(x!=fa)
        dfs(x,k);
    }
    p[seq[k]].ls=seq[k];
    p[seq[k]].rs=limt;
}
void update(int now)
{
    tree[now].A=tree[now<<1].A+tree[now<<1|1].A;
}
void build(int now,int l,int r)
{
    tree[now].l=l;
    tree[now].r=r;
    if(l==r)
    {
        tree[now].A=1;
        return;
    }
    int mid=(l+r)>>1;
    build(now<<1,l,mid);
    build(now<<1|1,mid+1,r);
    update(now);
}
void point_change(int now,int pos)
{
    if(tree[now].l==tree[now].r)
    {
        tree[now].A=tree[now].A^1;
        return;
    }
    int mid=(tree[now].l+tree[now].r)>>1;
    if(pos<=mid)
    point_change(now<<1,pos);
    if(pos>mid)
    point_change(now<<1|1,pos);
    update(now);
}
int ask_sum(int now,int l,int r)
{
    if(tree[now].l>=l&&tree[now].r<=r)
    {
        return tree[now].A;
    }
    int ans=0;
    int mid=(tree[now].l+tree[now].r)>>1;
    if(l<=mid)
    ans+=ask_sum(now<<1,l,r);
    if(r>mid)
    ans+=ask_sum(now<<1|1,l,r);
    return ans;
}
int main()
{
    memset(first,-1,sizeof(first));
    scanf("%d",&n);
    for(RI i=1;i<=n-1;i++)//别再错了这是颗n-1条边 
    {
        scanf("%d%d",&ru,&rv);
        add(ru,rv);
        add(rv,ru);
    }
    tot=0; 
    dfs(1,0);
    build(1,1,n);
    scanf("%d",&m);
    for(RI i=1;i<=m;i++)
    {
        ch=getchar();
        while(ch!='C'&&ch!='Q')
        ch=getchar();
        scanf("%d",&pos);
        if(ch=='C')
        {
            point_change(1,seq[pos]);//线段树上的对应位置为其dfs序 
        }
        if(ch=='Q')
        {
            printf("%d\n",ask_sum(1,p[seq[pos]].ls,p[seq[pos]].rs));
        }
    }
    return 0;
} 
*/
/*********************************************************************************************************/
/*********************************************************************************************************/
线段树
线段树科普：https://www.cnblogs.com/TenosDoIt/p/3453089.html
/*********************************************************************************************************/
例题：POJ 2528 贴海报问题
参考资料：
https://blog.csdn.net/acvay/article/details/45115469
https://blog.csdn.net/lsgqjh/article/details/47396949
https://blog.csdn.net/zizahn/article/details/52555321
/*********************************************************************************************************/
模板code
/*
639.线段树-贴海报 (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
由10^7块1x1的玻璃构成1x10^7的海报墙，每个海报完整地覆盖几块玻璃，海报的宽度可以不同。后来的人可以覆盖
前人的海报。一张海报如果有没被覆盖的部分，则称为可视海报。你的任务是找出有多少可视海报。
输入描述
第一行是测试的总数c，接下来的行是各测试用例。
每个测试的第一行是海报的总数n, n<=10000， 然后是n个按先后顺序贴的海报的位置li, ri. 满足1<=li<=ri<=10^7。
输出描述
每个测试的可视海报数目
输入样例
1
5
1 4
2 6
8 10
3 4
7 10
输出样例
4
*/
#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cstring>
using namespace std;

const int MAXN=100005;
bool hash[MAXN];
int li[MAXN],ri[MAXN];
int cov[MAXN<<4];
int a[MAXN*3];
int cnt;

int BinSea(int key,int n)//二分查找所在编号，就是离散后的位置号
{
	int l=0,r=n-1;
	while(l<=r)
	{
		int mid=(l+r)/2;
		if(a[mid]==key) return mid;
		else if(a[mid]<key) l=mid+1;
		else r=mid-1;
	}
	return -1;
} 

void Pushdown(int p)//将该区间的标记向子女节点传递
{
	if(cov[p]!=-1)
	{
		cov[p<<1]=cov[p<<1|1]=cov[p];
		cov[p]=-1;
	}
} 

void Update(int p,int l,int r,int x,int y,int c)
{
	if(x<=l&&y>=r)
	{
		cov[p]=c;
		return;
	}
	Pushdown(p);
	int mid=(l+r)/2;
	if(x<=mid) Update(p<<1,l,mid,x,y,c);
	if(y>mid) Update(p<<1|1,mid+1,r,x,y,c);
}

void Query(int p,int l,int r)//遍历每个区间的颜色 
{
	if(cov[p]!=-1)
	{
		if(!hash[cov[p]])
		{
			cnt++;
			hash[cov[p]]=true;
		}
		return;
	} 
	if(l==r) return;
	int mid=(l+r)/2;
	Query(p<<1,l,mid);
	Query(p<<1|1,mid+1,r);
}

int main()
{
	int T,n;
	cin>>T;
	while(T--)
	{
		cin>>n;
		int k=0;
		for(int i=0;i<n;i++)
		{
			cin>>li[i]>>ri[i];
			a[k++]=li[i];
			a[k++]=ri[i];
		}
		sort(a,a+k);//排序便于离散化 
		int h=1;
		for(int i=1;i<k;i++)//删去相同的数 
		{
			if(a[i]!=a[i-1])
				a[h++]=a[i]; 
		}
		for(int i=h-1;i>0;i--)//距离大于1之间的点要加一个数 
		{
			if(a[i]-a[i-1]>1)
				a[h++]=a[i-1]+1; 
		}
		sort(a,a+h);
		memset(cov,-1,sizeof(cov));
		for(int i=0;i<n;i++)
		{
			int l=BinSea(li[i],h);
			int r=BinSea(ri[i],h);
			Update(1,0,h-1,l,r,i);
		}
		cnt=0;
		memset(hash,0,sizeof(hash));
		Query(1,0,h-1);
		cout<<cnt<<endl;
	}
}
/*********************************************************************************************************/
/*********************************************************************************************************/
然后是前缀树，也就是字典树，Trie树
前缀树理解起来比其他树要简单很多
参考资料：https://blog.csdn.net/cyongxue/article/details/19603401
/*********************************************************************************************************/
一道入门的模板题，字符串匹配
参考资料：
https://blog.csdn.net/huatian5/article/details/52191352
https://blog.csdn.net/qq_34446253/article/details/52039974
/*********************************************************************************************************/
code：
/*
642.前缀树-串查找 (10分) 
C时间限制：1000 毫秒 |  C内存限制：3000 Kb
题目内容：
给N个模式串，每个不超过500个字符，再给M个句子串，句子长度<=10000, 判断每个句子里是否包含模式串.
N<=100,M<=100 ,字符都是小写字母
输入描述
第一行是N, M. 随后N行模式串，以及M行句子

输出描述
每个句子的判断结果，如果句子包含某个串则输出1，否则输出0

输入样例
5 8
abcde
defg
cdke
ab
f
abcdkef
abkef
bcd
bca
add
ab
qab
f

输出样例
1
1
0
0
0
1
1
1
*/ 
#include<iostream>
#include<queue>
#include<algorithm>
#include<cstring>
#include<cstdio>
using namespace std;

const int MAXN=105;
const int letters=26;
int nNode;
struct CNode{
	CNode *pChilds[letters];
	CNode *pPrev;
	bool bBadNode;
	void Init(){
		memset(pChilds,0,sizeof(pChilds));
		bBadNode=false;
		pPrev=NULL;
	} 
}tree[200];

void BuildDfa()
{
	for(int i=0;i<letters;i++)
		tree[0].pChilds[i]=tree+1;
	tree[1].pPrev=tree;
	tree[0].pPrev=NULL;
	queue<CNode*> Q;
	Q.push(tree+1);
	while(!Q.empty())
	{
		CNode *root=Q.front();
		Q.pop();
		for(int i=0;i<letters;i++)
		{
			CNode *p=root->pChilds[i];
			if(p==NULL) continue;
			CNode *pPrev=root->pPrev;
			while(pPrev)
			{
				if(pPrev->pChilds[i]!=NULL)
				{
					p->pPrev=pPrev->pChilds[i];
					if(p->pPrev->bBadNode)
						p->bBadNode=true;
					break;
				}
				else pPrev=pPrev->pPrev;
			}
			Q.push(p);
		}
	}
}

bool SearchDfa(char *s)
{
	CNode *p=tree+1;
	for(int i=0;s[i];i++)
	{
		for(;;)
		{
			if(p->pChilds[s[i]-'a']!=NULL)
			{
				p=p->pChilds[s[i]-'a'];
				if(p->bBadNode) return true;//遇到危险节点或者终止节点 
				break;
			}
			else p=p->pPrev; //回到前驱节点
		}
	}
	return false;
}

void  Insert(CNode *root,char *s)
{
	for(int i=0;s[i];i++)
	{
		if(root->pChilds[s[i]-'a']==NULL)
			root->pChilds[s[i]-'a']=tree+nNode++;
		root=root->pChilds[s[i]-'a'];
	}
	root->bBadNode=true;
}

int main()
{
	int N,M;
	cin>>N>>M;
	nNode=2;
	char s[200];
	for(int i=0;i<N;i++)
	{
		scanf("%s",s);
		Insert(tree+1,s);
	}
	BuildDfa();
	for(int i=0;i<M;i++)
	{
		scanf("%s",s);
		cout<<SearchDfa(s)<<endl;
	}
	return 0;
}

/*********************************************************************************************************/
/*********************************************************************************************************/
