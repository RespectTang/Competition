/*****************************************************************************************************/
/*
1458.动态规划——大容量背包 (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
有n个重量和价值分别为wi 和 vi 的 物品，从这些物品中选择总重量不超过 W 
的物品，求所有挑选方案中物品价值总和的最大值。
1 <= n <=100
1 <= wi <= 10^7
1 <= vi <= 100
1 <= W <= 10^9
输入描述
多组测试数据。
每组测试数据第一行输入，n 和 W ，接下来有n行，每行输入两个数，代表第i个物品的wi 和 vi。
输出描述
满足题意的最大价值，每组测试数据占一行。
输入样例
4 5
2 3
1 2
3 4
2 2
输出样例
7
*/ 
#include<iostream>
#include<cstdio>
using namespace std;
typedef long long ll;

ll dp[5100];
int v[510],w[510];
const ll INF=0x3f3f3f3f;

int main()
{
	int n,b;
	while(scanf("%d%d",&n,&b)!=EOF)
	{
		ll tot_w=0;
		ll tot_v=0;
		for(int i=0;i<n;i++)
		{
			scanf("%d%d",&w[i],&v[i]);
				tot_v+=v[i];
				tot_w+=w[i];
		}
		for(int i=0;i<=tot_v;i++)
			dp[i]=INF;
		dp[tot_v]=tot_w;
		for(int i=0;i<n;i++)
		 {
		 	for(int j=0;j<=tot_v;j++)
		 	{
		 		if(j-v[i]>=0)
		 		{
		 			if(dp[j]-w[i]>=0)
		 				dp[j-v[i]]=min(dp[j-v[i]],dp[j]-w[i]);
				 }
			 }
		 }
		 for(int i=tot_v;i>=0;i--)
		 	if(dp[i]<=b)
		 	{
		 		printf("%d\n",i);
		 		break;
			 }
		
	}
	return 0;
}
/*****************************************************************************************************/
/*
1457.动态规划——钢条问题 (10分) 
C时间限制：1 毫秒 |  C内存限制：3000 Kb
题目内容：
一公司购买长钢条，将其切为短钢条出售，假设切割没有成本，公司希望知道最佳的切割方案！假设我们知道
一段长度为i的钢条的价格为pi(i = 1,2,3...),钢条长度均为整英寸，下面给出一个价格表：
例如
长度i 1 2 3 4 5 6 7 8 9 10
价格pi 1 5 8 9 10 17 17 20 24 30
给定一长度为n的钢条和一张价格表(i =1, 2,3...n)，求切割钢条的方案，使的利润最大,可以不进行切割
输入描述
第一行两个个整数 N ，n(第一个为可切割的种数，第二个为公司购买钢条的长度)
接下来两行，第一行为长度（共N个），第二行为价格（共N个）
输出描述
输出一行
公司最大利润 v
输入样例
10 10
1 2 3 4 5 6 7 8 9 10
1 5 8 9 10 17 17 20 24 30
输出样例
30
*/
#include<iostream>
using namespace std;
#define MAX 1000010
//对应于长度为1,2...10的钢条价格表
int p[MAX],v[MAX];
//返回两个数的较大值
int max(int a,int b)
{
	return (a>b)?a:b;
}
/*首先检查所需值是否已知，如果是，则直接返回保存的值。
否则，用通常方法计算所需值q,然后将此值存入r[n]。值得注意的
是，笔者在此处没有对钢条的长度n进行限制，所以n可能大于10，
于是增加了自己的判断，若n大于10，则计算n-10的子序列*/
int MemoizedCutRodAux(int p[],int n,int r[])
{	
	if(r[n]>=0)
		return r[n];
	int q;
	if(n==0)
		q=0;
	else
	{
		q=-1;
		for(int i=0;i<n;i++)
		{
			if(i<10)
				q=max(q,p[i]+MemoizedCutRodAux(p,n-1-i,r));
			else
				q=max(q,r[10]+MemoizedCutRodAux(p,n-1-10,r));
		}
	}
	r[n]=q;
	return q;
}

int main()
{
	int n,N;
	cin>>N>>n;
	int *r=new int[n+1];
	for(int i=0;i<N;i++)
		cin>>v[i];
	for(int i=0;i<N;i++)
		cin>>p[i];
	for(int i=0;i<=n;i++)//将辅助数组的r[0..n]元素均初始化为-1
		r[i]=-1;
	int sum=MemoizedCutRodAux(p,n,r);
	cout<<sum;
	return 0;
}
