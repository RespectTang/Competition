综述：
http://dongxicheng.org/structure/lca-rmq/
LCA详解：
https://blog.csdn.net/u014679804/article/details/48000523
https://blog.csdn.net/qq_32400847/article/details/51543088

RMQ例题：
HDU 3813 神灯问题
参考资料：
https://blog.csdn.net/wlxsq/article/details/47273349
/*******************************************************************************************************************************/
code:
/*
1443.RMQ问题- 神灯 (10分) 
C时间限制：1000 毫秒 |  C内存限制：3000 Kb
题目内容：
从一个n位数字的整数中删除m位数字，要求余下的数字在不改变顺序的情况下，表示的值最小。
请神灯帮你。
 输入描述
整数n m, 可能有多个测试用例。 n<=1000
输出描述
余下的整数数。如果整数前面是0，不用输出.
输入样例
178543 4 1000001 1 100001 2 12345 2 54321 2
输出样例
13 1 0 123 321
*/
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<cstdio>
using namespace std;
#define INF 1<<30
const int N=1035;

int n,m;
int dp[N][25];//注意这里一定是int不是char！！！ 
char s1[N];
char ans[N];

int Min(int a,int b)//返回下标的比较 
{
	return s1[a]<=s1[b]?a:b;
} 

void make_rmq()
{
	for(int i=0;i<n;i++)//长度为0的初始值 
		dp[i][0]=i;
	for(int j=1;(1<<j)<n;j++)
	{
		for(int i=0;i+(1<<j)-1<n;i++)
		{
			dp[i][j]=Min(dp[i][j-1],dp[i+(1<<j-1)][j-1]);
		}
	}
} 

int query_rmq(int s,int v)//查询rmq 
{
	int k=(int)((log((v-s+1)*1.0))/(log(2.0)));//对数换底公式，求k的长度 
	return Min(dp[s][k],dp[v-(1<<k)+1][k]);
}

int main()
{
	while(~scanf("%s %d",s1,&m))
	{
		n=strlen(s1);//存储字符串的长度 
		make_rmq();
		int t=n-m;//要输出的长度
		int q=0,p=0;
		while(t--)
		{
			q=query_rmq(q,m++);//（划重点！！！）查询从下标q开始下标为m的最小值 
			ans[p++]=s1[q++]; 
		} 
		for(q=0;q<p;q++)
			if(ans[q]!='0')
				break;
		if(p==q) printf("0");
		else while(q<p) printf("%c",ans[q++]);
		printf("\n");
	}
	return 0;
} 
/*******************************************************************************************************************************/
LCA
LCA的在线做法是转化成RMQ的模板，离线做法目前还不怎么会
大概问题就是找最近的祖先节点的问题
/*******************************************************************************************************************************/
题目 HDU 2586
参考资料：
https://blog.csdn.net/lvshubao1314/article/details/44001481
https://blog.csdn.net/yangrui2002/article/details/76636317?locationNum=8&fps=1
/*******************************************************************************************************************************/
code
/*
1444.LCA问题-就是模板题 (10分) 
C时间限制：3000 毫秒 |  C内存限制：3000 Kb
题目内容：
村里有n座房子，房子之间有路。已知任何两个房子之间只有一条路径。有人会经常问张三和李四家多远这样的问题。 
输入描述
第一行T(T<=10),表示测试用例数目.
对每个测试用例，第一行是 n(2<=n<=40000) and m (1<=m<=200),分别是房子数目和询问数目。
随后是n-1行三元组 i,j,k, , 表示房子i和j之间的有路,长度是k(0<k<=40000).房子编号是1 到 n.
接下来的m行，每行是两个数a,b，表示要问房子a和b之间有多远。
输出描述
每个测试用例输出m行，是对查询的回答。不同的测试用例之间加一空行. 
输入样例
2
3 2
1 2 10
3 1 15
1 2
2 3
2 2
1 2 100
1 2
2 1
输出样例
10
25
100
100
*/
#include<iostream>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<cstdlib>
using namespace std;
const int maxn=40010;
const int maxm=25;

int _pow[maxm],m,n;
int head[maxn],ip;
int ver[maxn*2],R[maxn*2],first[maxn],dir[maxn],dp[maxn*2][maxm],tot;
bool vis[maxn];

struct node{
	int v,w,next;
}edge[maxn*2];

void init()
{
	memset(vis,false,sizeof(vis));
	memset(head,-1,sizeof(head));
	ip=0;
}

void addedge(int u,int v,int w)
{
	edge[ip].v=v;
	edge[ip].w=w;
	edge[ip].next=head[u];
	head[u]=ip++;	
}

void dfs(int u,int dep)
{
	vis[u]=true;
	ver[++tot]=u;
	first[u]=tot;
	R[tot]=dep;
	for(int i=head[u];i!=-1;i=edge[i].next)
	{
		int v=edge[i].v;
		int w=edge[i].w;
		if(!vis[v])
		{
			dir[v]=dir[u]+w;
			dfs(v,dep+1);
			ver[++tot]=u;
			R[tot]=dep;
		}
	}
}


void ST(int len)
{
	int k=(int)log((double)len)/(log(2.0));
	for(int i=1;i<=len;i++)
	{
		dp[i][0]=i;
	}
	for(int j=1;j<=k;j++)
	{
		for(int i=1;i+_pow[j]-1<=len;i++)
		{
			int a=dp[i][j-1];
			int b=dp[i+_pow[j-1]][j-1];
			if(R[a]<R[b])
				dp[i][j]=a;
			else dp[i][j]=b;
		}
	}
}

int RMQ(int x,int y)
{
	int k=(int)log((double)(y-x+1)/log(2.0));
	int a=dp[x][k];
	int b=dp[y-_pow[k]+1][k];
	if(R[a]<R[b])
		return a;
	else return b;
}

int LCA(int u,int v)
{
	int x=first[u];
	int y=first[v];
	if(x>y) swap(x,y);
	int res=RMQ(x,y);
	return ver[res];
}

int main()
{
	for(int i=0;i<maxn;i++)
		_pow[i]=(1<<i);
	int T;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d%d",&n,&m);
		init();
		for(int i=1;i<n;i++)
		{
			int u,v,w;
			scanf("%d%d%d",&u,&v,&w);
			addedge(u,v,w);
			addedge(v,u,w);
		}
		tot=0;
		dir[1]=0;
		dfs(1,1);
		ST(2*n-1);
		while(m--)
		{
			int u,v;
			scanf("%d%d",&u,&v);
			int lca=LCA(u,v);
			printf("%d\n",dir[u]+dir[v]-2*dir[lca]);
		}
	}
	
	return 0;
}



